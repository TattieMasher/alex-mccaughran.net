<!DOCTYPE html>
<html lang="en">
    <head>
        <meta name="robots" content="noindex, nofollow">
        <meta charset="utf-8" />
        <meta name="author" content="Alex McCaughran" />
        <!-- Set viewport to ensure this page scales correctly on mobile devices -->
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin> <!-- Google fonts -->
		<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prism-themes/themes/prism-material-dark.css"> <!-- Syntax highlighting -->
        <link rel="stylesheet" href="../css/prism.css"> <!-- Syntax highlighting -->
        <link rel="stylesheet" href="../css/main.css" /> <!-- My styles -->
        <script type="text/javascript" src="../js/scripts.js"></script>
        <title>Alex McCaughran</title>
    </head>
    <body>
        <?php include('../config.php');        // Include config data
        include('../components/navbar.php');   // Incldue dynamic navbar
        ?>
        <main>
            <section class="project-page-header">
                <div>
                    <h1>Shady Link Generator</h1>
                    <h4>This small, satirical project can be used for fun, to send friends and others scammy links to user-specified URLs.</h4>
                </div>
                <div class="project-header-links">
                    <a href="https://shadeee.click/"><img class="project-github" src="/images/play-sign.png"></a>
                    <a href="https://github.com/TattieMasher/Shadifier"><img class="project-github" src="/images/github-sign.png"></a>
                </div>
            </section>
            <section class="project-section">
                <p>This fun little web-app takes a user-supplied URL and expiry time. It then generates a long, shady-looking URL then saves this data to a MySQL database table.
                    <br><br>When the shady URL is visited, the user lands on a fun page, showing a DALL·E generated Nigerian prince, congratulating them on receiving a gift!
                    The landing page uses the <a class="about-link" href="https://confetti.js.org/">tsParticles JavaScript confetti</a> library to shoot fun confetti, adding to that "am I being scammed?" feeling.</p>

                <div class="code-block">
                    <pre><code class="language-php">$urlRequested = $_SERVER['REQUEST_URI'];
$pathSegment = trim(extractPathAfterBaseURL($urlRequested, $baseUrl));

if ($pathSegment === "") {
    include('components/url-form.php'); 
} else {
    include('components/landing-page.php');
}

</code></pre>
                    <p>
                        First of all, the request URL is passed to a function of mine, <span class="code-wrap">extractPathAfterBaseURL</span>, which returns the last part of a URL (after "/").
                        <br><br>If this is empty, it indicates we're on the homepage (meaning we've not visited a link generated by this app). In this case, the basic form to allow users to pass URLs to our database is loaded.
                        <br><br>If it's not empty, the page being visited is treated as a URL generated by this application, and so we'll load the landing page elements.
                    </p>
                </div>

                <div class="code-block">
                    <p>
                        Here we have the main part of our project: the link generation. It works very simply, in truth. 
                        <br><br>Firstly, an array of shady-seeming strings is declared (e.g. "millionaire", "multi-level-marketing", etc). Then an empty string is also declared.
                        <br><br>Then, we enter our for loop, iterating as many times as our <i>shadiness</i> variable is equal to. The idea here is that, in later updates, users will be able to specify how many shady terms to include in the generated link.
                        <br><br>In each iteration, an element of the <i>shadyElements</i> array is concatenated to the empty string and is delimited by an exclamation mark– the scammiest punctionation available...!
                    </p>
                    <pre><code class="language-php">function generateShadyURL() {
    $shadyElements = [
        "wow", "free", "prizes", "nigerian-prince",
        "win", "millionaire", "discount", "bargain",
        "mind-blowing", "not-clickbait", "VIP",
        "once-in-a-lifetime", "exclusive", "lottery",
        "pyramid-scheme", "multi-level-marketing", "not-a-scam"
    ];
    $shadiness = 10; // Number of shadyElements (above) in generated URL

    $shadyURL = '';
    for ($i = 0; $i < $shadiness; $i++) {
        $shadyURL .= $shadyElements[rand(0,count($shadyElements))];
        $shadyURL .= "!";   // Shady element delimiter
    }

    return "$shadyURL";
}</code></pre>
                </div>

                <div class="code-block">
                    <pre><code class="language-php">
$stmt = $pdo->prepare("INSERT INTO shady_urls (original_url, shady_url, expiry_datetime) VALUES (?, ?, ?)");
$stmt->execute([$originalURL, $shadyURL, $expiryDate]);
                    </code></pre>
                    <p>
                        When the app is first opened, a PHP Data Object (PDO) is created, connecting to the application database.
                    <br><br>Once a URL has been generated (using the previously discussed function), it is then saved using a simple prepared statement.
                    </p>
                </div>

                <div class="code-block-right">
                    <p>
                        If <span class="code-wrap">extractPathAfterBaseURL</span> returns anything but "" when the page initially loads, the prepared statement shown here is ran.
                    <br><br>It attempts to get the user-supplied URL for the given <i>shadyUrl</i> variable (which is the last segment of the request URL, after "/").
                    <br><br>The original_url from the database is returned, if it has not expired and can be found. If not, false is returned.
                    </p>
                <pre><code class="language-php">try {
    $query = "SELECT original_url FROM shady_urls WHERE shady_url = ? AND expiry_datetime > CURRENT_TIMESTAMP";
    $stmt = $pdo->prepare($query);
    $stmt->execute([$shadyUrl]);

    $result = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($result) {
        return $result['original_url'];
    } else {
        return false;
    }
} catch (PDOException $e) {
    echo "Error: " . $e->getMessage();
    return false;
}
                </code></pre>
                </div>

                <div class="code-block">
                    <pre><code class="language-php">if ($shadyUrl !== false) {
    $originalURL = urldecode($shadyUrl);

    // Display the redirect button within the center of the page
    echo '&ltdiv id="center-button">&lta id="shady-link" href="http://' . $originalURL . '">&ltbutton id="success">Claim Gift&lt/button>&lt/a>&lt/div>';
    } else {
    echo '&ltdiv id="center-button">&ltbutton id="failure">This link has expired!&lt/button>&lt/div>';
}</code></pre>
                    <p>
                        A button is displayed in the center of the viewport.
                    <br><br>If the original URL could be found in the database, the button appears green and the original URL is added itno the href attribute of the anchor around the button.
                    <br><br>If it can't be found, the button will display as red and say a generic "link has expired" message.
                    </p>
                </div>

            </section>
        </main>
        
        <?php include('../components/footer.php');?>

        <script src="../js/prism.js"></script>
    </body>
</html>